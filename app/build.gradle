apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        applicationId "com.sun"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {

        }

        release {
            if (keystorePropertiesFile.exists()) {
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    buildTypes {
        debug {
            debuggable true
        }

        release {
            debuggable false
            minifyEnabled true
            zipAlignEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "default"
    productFlavors {
        def URL_END_POINT = "URL_END_POINT";
        develop {
            versionNameSuffix = "-dev"
            applicationIdSuffix = ".dev"
            buildConfigField "String", URL_END_POINT, '"https://api.github.com/"'
        }
        staging {
            versionNameSuffix = "-staging"
            applicationIdSuffix = ".staging"
            buildConfigField "String", URL_END_POINT, '""'
        }
        product {
            buildConfigField "String", URL_END_POINT, '""'
        }
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    packagingOptions {
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation kotlin_lib
    implementation appcompat
    implementation ktx
    implementation fragment_ktx
    implementation constraint_layout
    implementation recycler_view
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "androidx.test.ext:junit:$ext_junit_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_core_version"

    //Hilt
    implementation hilt_lib
    kapt hilt_android_compiler

    // Retrofit
    implementation retrofit
    implementation gson_converter
    implementation gson

    // Logging
    implementation logging_interceptor

    // Google Architecture Components
    implementation live_data
    implementation view_model

    // Coroutines
    implementation coroutines
    implementation coroutines_android
    implementation coroutines_test

    // Navigation Components
    implementation navigation_fragment
    implementation navigation_ui

    // Firebase
    implementation platform(firebase_bom)
    implementation firebase_messaging
    implementation firebase_analytics
    implementation firebase_crashlytics

    // Paging 3
    implementation paging_lib

    // Swipe To Refresh
    implementation swipe_to_refresh
}
